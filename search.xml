<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>免费下载英文电子书</title>
      <link href="/2021/08/14/%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E8%8B%B1%E6%96%87%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
      <url>/2021/08/14/%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E8%8B%B1%E6%96%87%E7%94%B5%E5%AD%90%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="免费下载英文电子书教程"><a href="#免费下载英文电子书教程" class="headerlink" title="免费下载英文电子书教程"></a>免费下载英文电子书教程</h1><p><a href="https://www.bilibili.com/video/BV1AL411J7g8/">教程链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推导投影矩阵</title>
      <link href="/2021/08/10/%E6%8E%A8%E5%AF%BC%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/"/>
      <url>/2021/08/10/%E6%8E%A8%E5%AF%BC%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="推导投影矩阵"><a href="#推导投影矩阵" class="headerlink" title="推导投影矩阵"></a>推导投影矩阵</h1><p>在任何 3D 图形程序员工具包中的基本矩阵变换中，投影矩阵都比较复杂。平移和缩放一目了然，任何对三角学有基本了解的人都可以想象出旋转矩阵，但投影有点棘手。如果您曾经查找过此类矩阵的公式，就会知道常识不足以告诉您它的来源。然而，我还没有在网上看到很多资源来描述如何推导投影矩阵。这就是我将在本文中讨论的主题。</p><p>对于那些刚开始使用 3D 图形的人，我应该提一下，了解投影矩阵的来源可能是我们中间有数学倾向的人的好奇心，但这不是必需的。你可以只用公式；如果您正在使用像 Direct3D 这样的图形 API 来为您构建投影矩阵，那么您甚至不需要它。所以，如果这篇文章的细节看起来有点让人不知所措，不要害怕。只要您了解投影的作用，如果您不想，您就不必担心它是如何工作的。这篇文章是为那些想要了解更多细节而不是绝对必要的程序员而写的。</p><h2 id="概述：什么是投影？"><a href="#概述：什么是投影？" class="headerlink" title="概述：什么是投影？"></a>概述：什么是投影？</h2><p>计算机显示器是一个二维表面，因此如果要显示三维图像，则需要一种将 3D 几何图形转换为可以呈现为 2D 图像的形式的方法。而这正是投影所做的。举一个非常简单的例子，将 3D 对象投影到 2D 表面的一种方法是简单地丢弃每个点的 z 坐标。对于多维数据集，它可能类似于图 1。<br><img src="https://img-blog.csdnimg.cn/img_convert/94f7da7c9bd8a845061a42d8ee4c08df.gif"><br>图 1：通过丢弃 z 坐标投影到 xy 平面上。   </p><p>当然，这过于简单，在大多数情况下并不是特别有用。首先，你根本不会投射到飞机上；相反，您的投影公式会将您的几何图形转换为一个新的体积，称为规范视图体积。规范视图体积的确切坐标可能因图形 API 的不同而有所不同，但出于本次讨论的目的，将其视为从 (–1, –1, 0) 扩展到 (1, 1, 1) 的框)，这是 Direct3D 使用的约定。一旦所有顶点都映射到规范视图体积中，只有它们的 x 和 y 坐标用于将它们映射到屏幕。然而，z 坐标并非无用；它通常由深度缓冲区用于可见性确定。这就是您转换为新体积而不是投影到平面上的原因。</p><p>请注意，图 1 还描绘了一个左手坐标系，其中相机向下看正 z 轴，y 轴指向上方，x 轴指向右侧。这也是 Direct3D 使用的约定，我将在整篇文章中使用。对于右手坐标系或稍微不同的规范视图体积，计算没有显着不同，因此即使您选择的 API 使用的约定与 Direct3D 使用的约定不同，所讨论的所有内容仍然适用。</p><p>这样，您就可以进入实际的投影变换。有很多不同的投影方法，我将介绍两种最常见的：正交和透视。</p><h2 id="正投影"><a href="#正投影" class="headerlink" title="正投影"></a>正投影</h2><p>正投影，因为所有的投影线都垂直于最终的绘图表面而得名，是一种相对简单的投影技术。视图体积（即包含您要显示的所有几何图形的眼空间区域）是一个轴对齐的框，您可以将其转换为规范的视图体积，如图 2 所示。<br><img src="https://img-blog.csdnimg.cn/img_convert/7c2351db9f622132ae4750b1b585b6e5.gif"><br>图 2：正交投影。  </p><p>如您所见，视图体积由六个平面定义：<br><img src="https://img-blog.csdnimg.cn/20210810215724156.png">  </p><p>因为视图体积和规范视图体积都是轴对齐的框，所以在这种类型的投影中没有距离校正。事实上，最终结果与图 1 中的结果非常相似，其中您只是删除了每个点的 z 坐标。3D 空间中相同大小的对象在投影中显示的大小相同，即使一个对象离相机的距离比另一个远得多。在 3D 空间中平行的线在最终图像中保持平行。对于第一人称射击游戏之类的游戏来说，使用这种投影是不可能的——想象一下，在无法判断距离有多远的情况下尝试玩其中一个游戏！——但它确实有它的用途。例如，您可以在基于图块的游戏中使用它，尤其是在相机以固定角度放置的游戏中。图 3 显示了一个简单的示例。<br><img src="https://img-blog.csdnimg.cn/img_convert/52c8a4ac6d47eb610fbd19d0c963de6f.gif"><br>图 3：正射投影的简单示例  </p><p>因此，事不宜迟，开始弄清楚这是如何工作的。最简单的方法可能是分别考虑三个轴中的每一个，并计算如何将沿该轴的点从原始视图体积映射到规范视图体积。您从 x 坐标开始。视图体积内的一个点将在 [l, r] 范围内具有 x 坐标，并且您希望将其转换为 [–1, 1] 范围。<br><img src="https://img-blog.csdnimg.cn/20210810215816416.png"><br>现在，为了准备将范围缩小到您想要的大小，您从所有项中减去 l 以在左侧产生一个零。您可以在此处采用的另一种方法是转换范围，使其以零为中心，而不是将其一个端点设为零，但这种方式代数更简洁，因此我会这样做的可读性。<br><img src="https://img-blog.csdnimg.cn/2021081022104335.png"><br>现在您的范围的一端位于零，您可以将其缩小到您想要的大小。您希望 x 值的范围为两个单位宽，从 1 到 –1，因此您乘以 2/(r – l)。请注意，r – l 是您的视图体积的宽度，因此始终为正数，因此您不必担心不等式会改变方向。<br><img src="https://img-blog.csdnimg.cn/20210810221113855.png"><br>接下来，从所有项中减去一个以产生所需的 [–1, 1] 范围。<br><img src="https://img-blog.csdnimg.cn/20210810221204751.png"><br>一些基本代数允许您将中心项写为单个分数：<br><img src="https://img-blog.csdnimg.cn/20210810221238532.png"><br>最后，您将中心项分成两个部分，使其采用 px + q 的形式；您需要以这种方式对您的术语进行分组，以便您推导出的方程可以轻松转换为矩阵形式。<br><img src="https://img-blog.csdnimg.cn/20210810221308212.png"><br>这个不等式的中心项现在为您提供了将 x 转换为规范视图体积所需的等式。<br><img src="https://img-blog.csdnimg.cn/20210810221334488.png"><br>获得 y 的公式所需的步骤完全相同——只是用 y 代替 x，用 t 代替 r，用 b 代替 l——所以在这里不再重复它们，我只展示结果：<br><img src="https://img-blog.csdnimg.cn/20210810221352526.png"><br>最后，您需要推导出 z 的公式。在这种情况下有点不同，因为您将 z 映射到范围 [0, 1] 而不是 [–1, 1]，但这应该看起来很熟悉。这是您的起始条件，范围 [n, f] 上的 z 坐标：<br><img src="https://img-blog.csdnimg.cn/20210810221501764.png"><br>您从所有项中减去 n，因此范围的下端位于零处：<br><img src="https://img-blog.csdnimg.cn/20210810221448943.png"><br>现在，剩下的就是除以 f – n 以产生最终的范围 [0, 1]。和以前一样，请注意 f – n 表示您的观看量的深度，因此永远不会是负数。<br><img src="https://img-blog.csdnimg.cn/20210810221531547.png"><br>最后，你把它分成两部分，所以它采用 pz + q 的形式：<br><img src="https://img-blog.csdnimg.cn/20210810221549682.png"><br>这为您提供了转换 z 的公式：<br><img src="https://img-blog.csdnimg.cn/20210810221604852.png"><br>现在，您已准备好编写正交投影矩阵。回顾您迄今为止的工作，以下是您推导出的三个投影方程：<br><img src="https://img-blog.csdnimg.cn/20210810221620177.png"><br>如果你以矩阵形式写这个，你会得到：<br><img src="https://img-blog.csdnimg.cn/20210810221636140.png"><br>而已！Direct3D 提供了一个名为 D3DXMatrixOrthoOffCenterLH() 的函数（多口啊！），它基于相同的公式构造一个正交投影矩阵；您可以在 DirectX 文档中找到它。那个笨拙的函数名称中的“LH”指的是您使用的是左手坐标系。但是，“OffCenter”究竟是什么意思？</p><p>该问题的答案将引导您获得正交投影矩阵的简化形式。考虑几点：首先，在眼睛空间中，您的相机位于原点并直接向下看 z 轴。其次，您通常希望您的视野向左和向右延伸同样远，并且在 z 轴上方同样远，如下所示。如果是这种情况，z 轴将直接通过您的视域中心，因此您有 r = –l 和 t = –b。换句话说，您可以完全忘记 r、l、t 和 b，而只需根据宽度 w 和高度 h 以及其他裁剪平面 f 和 n 来定义您的视图体积。如果你将这些替换到上面的正交投影矩阵中，你会得到这个相当简化的版本：<br><img src="https://img-blog.csdnimg.cn/20210810221653279.png"><br>该等式由 Direct3D 函数 D3DXMatrixOrthoLH() 实现。你几乎总是可以使用这个矩阵而不是你上面派生的更一般的“偏离中心”版本，除非你对你的投影做了一些奇怪的事情。</p><p>在完成本节之前，还有一点。值得注意的是，这个矩阵可以表示为两个更简单变换的串联：一个平移，后跟一个比例。如果您从几何角度考虑它，这对您来说应该是有意义的，因为您在正交投影中所做的就是将点从一个轴对齐的框移到另一个；观看体积不会改变它的形状，只会改变它的位置和大小。具体来说，你有：<br><img src="https://img-blog.csdnimg.cn/20210810221709270.png"><br>这种投影的产品形式可能更直观一些，因为它可以让您更轻松地想象正在发生的事情。首先，观察体沿 z 轴平移，使其近平面与原点重合；然后，应用一个比例将其降低到规范视图体积的尺寸。这很容易理解，对吧？偏心正交投影的矩阵也可以表示为变换和比例的乘积，但它与上面显示的结果非常相似，我不会在这里列出。</p><h2 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h2><p>透视投影是一种稍微复杂的投影方法，使用频率更高，因为它会产生距离的错觉，从而产生更逼真的图像。从几何上讲，这种方法与正射投影的区别在于，在透视投影中，视体积是一个截锥体——即一个截棱锥——而不是一个轴对齐的盒子。您可以在图 4 中看到这一点。<br><img src="https://img-blog.csdnimg.cn/img_convert/c9f793ad6734621195f15af42199ad74.gif"><br>图 4：透视投影。  </p><p>如您所见，视锥体的近平面从 (l, b, n) 延伸到 (r, t, n)。远平面的范围是通过从原点通过近平面上的四个点中的每一个跟踪一条线直到它们与平面 z = f 相交来找到的。因为视锥体从原点延伸得越远，它就越宽；并且因为您正在将该形状转换为规范的视图体积，即一个盒子；视锥体的远端比近端被压缩的程度更大。因此，视锥体中更靠后的物体看起来更小，这会给您带来距离的错觉。</p><p>因为在这种变换中体积的形状发生了变化，透视投影不能像正投影那样简单地表示为平移和缩放。你必须想出一些不同的东西。但是，这并不意味着您在正投影上所做的工作毫无用处。数学中一种方便的问题解决技术是将问题简化为您已经知道如何解决的问题。所以，这就是你可以在这里做的。上一次，您一次检查一个坐标，但这次您将一起检查 x 和 y 坐标，然后再考虑 z。您对 x 和 y 的攻击计划可以分为两个步骤：</p><blockquote><p>步骤 1：给定视锥体内的一个点 (x, y, z)，将其投影到近平面 z = n。因为投影点在近平面上，它的 x 坐标将在 [l, r] 范围内，它的 y 坐标将在 [b, t] 范围内。<br>第 2 步：使用您在正投影研究中推导出的公式，将新的 x 坐标从 [l, r] 映射到 [–1, 1]，将新的 y 坐标从 [b, t] 映射到 [– 1, 1]。</p></blockquote><p>听起来不错？然后，请看图 5。<br><img src="https://img-blog.csdnimg.cn/img_convert/a729d9d85a5b5b411f9e7b500f66ef66.gif"><br>图 5：使用相似三角形将点投影到 z = n 上。   </p><p>在此图中，您从点 (x, y, z) 到原点绘制了一条线，并记下该线与平面 z = n 相交的点 — 用黑色标记的那个点。从这些点开始，您将两个垂直于 z 轴的垂线放下，突然之间您就有了一对相似的三角形。如果您压抑了对高中几何的记忆，那么相似三角形就是形状相同但大小不一定相同的三角形。要证明两个三角形相似，证明它们对应的角相等就足够了，在这种情况下不难做到。角 1 由两个三角形共享，显然它等于自身。角2和角3是两条平行线相交所成的对应角，所以它们相等。而且，直角当然彼此相等，</p><p>您感兴趣的相似三角形的性质是它们的对应边对都以相同的比例存在。您知道沿 z 轴的边长；它们是 n 和 z。这意味着其他对边也以 n / z 的比率存在。所以，考虑一下你所知道的。根据勾股定理，从 (x, y, z) 向下到 z 轴的垂线长度如下：<br><img src="https://img-blog.csdnimg.cn/20210810221732692.png"><br> 如果您知道从投影点到 z 轴的垂线长度，您就可以计算出该点的 x 和 y 坐标。但是，这很容易！因为你有相似的三角形，所以长度只是 L 乘以 n / z：<br><img src="https://img-blog.csdnimg.cn/20210810221748461.png"><br> 因此，您的新 x 坐标是 x * n / z，而您的新 y 坐标是 y * n / z。步骤 1 就这样结束了。步骤 2 只是要求您执行与上一节中所做的相同的映射，因此是时候重新审视您在正投影研究中推导出的公式了。回想一下，您将我们的 x 和 y 坐标映射到规范视图体积中，如下所示：<br><img src="https://img-blog.csdnimg.cn/20210810221806506.png"><br> 您现在可以再次调用这些相同的公式，除非您需要考虑您的投影；所以，你用 x * n / z 替换 x，用 y * n / z 替换 y：<br><img src="https://img-blog.csdnimg.cn/20210810221831107.png"><br> 现在，你乘以 z：<br><img src="https://img-blog.csdnimg.cn/2021081022184719.png"><br> 这些结果有点奇怪。要将这些方程直接写入矩阵，您需要将它们写成以下形式：<br><img src="https://img-blog.csdnimg.cn/20210810221901623.png"><br> 但很明显，现在不会发生这种情况，因此您似乎陷入了僵局。该怎么办？好吧，如果您能找到一种方法来获得 z’z 的公式，就像 x’z 和 y’z 的公式一样，您可以编写一个矩阵变换，将 (x, y, z) 映射到 (x’z, y ‘z，z’z)。然后，您只需将该点的分量除以 z，最终得到 (x’, y’, z’)，这正是您想要的。</p><p>因为您知道 z 到 z’ 的转换不以任何方式依赖于 x 或 y，所以您知道您需要 z’z = pz + q 形式的公式，其中 p 和 q 是常数。而且，您可以很容易地找到这些常量，因为您知道如何在两种特殊情况下获得 z’： 因为您将 [n, f] 映射到 [0, 1]，所以您知道 z’ = 0 当 z = n , 当 z = f 时 z’ = 1。当您将第一组值插入 z’z = pz + q 时，您可以根据 p 求解 q：<br><img src="https://img-blog.csdnimg.cn/20210810221916716.png"><br>现在，您插入第二组值，并得到：<br><img src="https://img-blog.csdnimg.cn/20210810221928780.png"><br>将 q 的值代入该方程，您可以轻松求解 p：<br><img src="https://img-blog.csdnimg.cn/20210810221943322.png"><br>现在您有了 p 的值，并且您之前发现 q = –pn，您可以求解 q：<br><img src="https://img-blog.csdnimg.cn/20210810221955921.png"><br>最后，如果将 p 和 q 的这些表达式代入原始公式，您将得到：<br><img src="https://img-blog.csdnimg.cn/2021081022200919.png"><br>您现在几乎完成了，但是您解决这个问题的方法的不寻常性质要求您对齐次坐标 w 做一些事情。通常，您只是满足于设置 w’ = 1——您可能已经注意到基本变换中的底行几乎总是 [0 0 0 1]——但现在您正在编写一个变换到点 (x ‘z, y’z, z’z, w’z)，所以不是写 w’ = 1，而是写 w’z = z。因此，您将用于透视投影的最后一组方程是：<br><img src="https://img-blog.csdnimg.cn/20210810222023304.png"><br>而且，当你以矩阵形式写出这组方程时，你会得到：<br><img src="https://img-blog.csdnimg.cn/20210810222036447.png"><br>当您将其应用于点 (x, y, z, 1) 时，它会产生 (x’z, y’z, z’z, z)。但是随后，您应用了除以齐次坐标的通常步骤，因此最终得到 (x’, y’, z’, 1)。这就是透视投影。Direct3D 在函数 D3DXMatrixPerspectiveOffCenterLH() 中实现了上述公式。与正交投影一样，如果您假设视锥体是对称的并以 z 轴为中心（意味着 r = –l 和 t = –b），您可以通过将矩阵写成视锥体的矩阵来大大简化事情宽度 w 和它的高度 h：<br><img src="https://img-blog.csdnimg.cn/20210810222051601.png"><br>Direct3D 也有这个矩阵的函数，称为 D3DXMatrixPerspectiveLH()。</p><p>最后，还有一种经常派上用场的透视投影表示法。在这种形式中，您不必严格考虑视锥体的尺寸，而是根据相机的视野来定义它。有关此概念的说明，请参见图 6。<br><img src="https://img-blog.csdnimg.cn/img_convert/2d1ab4505448e758a8cc52582fb5d2fd.gif"><br>图 6：根据垂直视场角 a 定义的视锥体高度。</p><p>垂直视场角为a。这个角度被 z 轴一分为二，所以通过一些基本的三角学，你可以写出以下方程，将 a 与近平面 n 和屏幕高度 h 相关联：<br><img src="https://img-blog.csdnimg.cn/20210810222108585.png"><br>此表达式允许您替换投影矩阵中的高度。此外，您将宽度替换为纵横比 r，定义为显示区域的宽度与其高度的比率。所以你有了：<br><img src="https://img-blog.csdnimg.cn/20210810222123920.png"><br>因此，根据垂直视场角 a 和纵横比 r，您有一个透视投影矩阵：<br><img src="https://img-blog.csdnimg.cn/20210810222136166.png"><br>在 Direct3D 中，您可以通过调用 D3DXMatrixPerspectiveFovLH() 来获得这种形式的矩阵。这种形式特别有用，因为您可以将 r 设置为您正在渲染的窗口的纵横比，而 p / 4 的视角通常就可以了。因此，您真正需要担心定义的唯一事情是视锥体沿 z 轴的范围。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>这就是您需要了解的有关投影变换背后的数学知识的全部内容。还有一些其他较少使用的投影方法，当然如果您使用右手坐标系或不同的规范视图体积，情况会略有不同，但是您应该能够通过使用结果以本文为基础。如果您想了解有关投影和其他变换的更多信息，请查看Tomas Moller 和 Eric Haines 的Real-Time Rendering；或Computer Graphics：Principles and Practice by James D. Foley、Andries van Dam、Steven K. Feiner 和 John F. Hughes；这是我在撰写本文时参考的两本关于计算机图形学的优秀书籍。</p>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 投影矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2021/08/07/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/08/07/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>这些是 John Gruber 的原始设计文档中列出的元素。所有 Markdown 应用程序都支持这些元素。<br><img src="https://img-blog.csdnimg.cn/2021080722171071.png"></p><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><p>这些元素通过添加额外的功能扩展了基本语法。但是，并非所有 Markdown 应用程序都支持这些元素。<br><img src="https://img-blog.csdnimg.cn/20210807221747578.png"></p><h1 id="文档参考"><a href="#文档参考" class="headerlink" title="文档参考"></a>文档参考</h1><p><a href="https://www.markdown.xyz/">Markdown 指南</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMSpico激活Windows和Office</title>
      <link href="/2021/08/07/KMSpico%E6%BF%80%E6%B4%BBWindows%E5%92%8COffice/"/>
      <url>/2021/08/07/KMSpico%E6%BF%80%E6%B4%BBWindows%E5%92%8COffice/</url>
      
        <content type="html"><![CDATA[<h1 id="KMSpico下载安装"><a href="#KMSpico下载安装" class="headerlink" title="KMSpico下载安装"></a>KMSpico下载安装</h1><p><a href="https://pan.baidu.com/s/1jghgYDQNRielpvgU1yh5gA">KMSpico</a> 提取码：6666</p><h1 id="KMSpico使用"><a href="#KMSpico使用" class="headerlink" title="KMSpico使用"></a>KMSpico使用</h1><ol><li>安装完以后通过管理员方式运行KMSpico。</li><li>如果您刚刚从新安装了操作系统，请按红色按钮开始激活过程&gt;<br><img src="https://www.getkmspico.com/images/2.jpg"></li><li>如果您需要检查您的激活状态，请单击Tokens选项卡，然后单击带有大“I”的蓝色方块（上方右侧屏幕）。这将显示您的系统版本以及激活状态。</li><li>您也可以单击开始并右键单击计算机并选择属性，屏幕也会显示激活状态。<br><img src="https://www.getkmspico.com/images/6.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMSpico </tag>
            
            <tag> Windows </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过V2Ray搭配使用Tor浏览器</title>
      <link href="/2021/08/04/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87V2Ray%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8Tor%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2021/08/04/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87V2Ray%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8Tor%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tor浏览器的下载与安装"><a href="#Tor浏览器的下载与安装" class="headerlink" title="Tor浏览器的下载与安装"></a>Tor浏览器的下载与安装</h1><p><a href="https://www.torproject.org/download/">官网地址</a></p><h1 id="打开tor浏览器，在右上角打开Options"><a href="#打开tor浏览器，在右上角打开Options" class="headerlink" title="打开tor浏览器，在右上角打开Options"></a>打开tor浏览器，在右上角打开Options</h1><p><img src="https://img-blog.csdnimg.cn/20210804220646257.png"></p><h1 id="申请一个torproject网桥"><a href="#申请一个torproject网桥" class="headerlink" title="申请一个torproject网桥"></a>申请一个torproject网桥</h1><p><img src="https://img-blog.csdnimg.cn/20210804220947991.png"></p><h1 id="打开V2RayN，点击“参数设置”—“Core基础设置”，可以看到本地监听的IP和端口，取消勾选“开启流量监测”。"><a href="#打开V2RayN，点击“参数设置”—“Core基础设置”，可以看到本地监听的IP和端口，取消勾选“开启流量监测”。" class="headerlink" title="打开V2RayN，点击“参数设置”—“Core基础设置”，可以看到本地监听的IP和端口，取消勾选“开启流量监测”。"></a>打开V2RayN，点击“参数设置”—“Core基础设置”，可以看到本地监听的IP和端口，取消勾选“开启流量监测”。</h1><p><img src="https://img-blog.csdnimg.cn/20210804221245534.png"></p><h1 id="在Tor浏览器中填入上面代理IP和端口"><a href="#在Tor浏览器中填入上面代理IP和端口" class="headerlink" title="在Tor浏览器中填入上面代理IP和端口"></a>在Tor浏览器中填入上面代理IP和端口</h1><p><img src="https://img-blog.csdnimg.cn/20210804221056877.png"></p><h1 id="点击Connect连接至Tor网络，输入https-check-torproject-org-查看是否连接成功。"><a href="#点击Connect连接至Tor网络，输入https-check-torproject-org-查看是否连接成功。" class="headerlink" title="点击Connect连接至Tor网络，输入https://check.torproject.org/ 查看是否连接成功。"></a>点击Connect连接至Tor网络，输入<a href="https://check.torproject.org/">https://check.torproject.org/</a> 查看是否连接成功。</h1><p><img src="https://img-blog.csdnimg.cn/2021080422152456.png"></p>]]></content>
      
      
      <categories>
          
          <category> 黑客技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tor浏览器 </tag>
            
            <tag> 深网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS插件VA小番茄下载破解安装</title>
      <link href="/2021/08/01/VS%E6%8F%92%E4%BB%B6VA%E5%B0%8F%E7%95%AA%E8%8C%84%E4%B8%8B%E8%BD%BD%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/"/>
      <url>/2021/08/01/VS%E6%8F%92%E4%BB%B6VA%E5%B0%8F%E7%95%AA%E8%8C%84%E4%B8%8B%E8%BD%BD%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="VA小番茄下载地址"><a href="#VA小番茄下载地址" class="headerlink" title="VA小番茄下载地址"></a>VA小番茄下载地址</h1><blockquote><p><a href="https://pan.baidu.com/s/1IfH9Um9o_yKpj9UFIwO0iQ">下载地址</a><br>提取码：9gy6</p></blockquote><h1 id="下载完以后点击安装"><a href="#下载完以后点击安装" class="headerlink" title="下载完以后点击安装"></a>下载完以后点击安装</h1><p><img src="https://img-blog.csdnimg.cn/20210801144914229.png"><br><img src="https://img-blog.csdnimg.cn/20210801144920161.png"></p><h1 id="替换VA-X-dll文件"><a href="#替换VA-X-dll文件" class="headerlink" title="替换VA_X.dll文件"></a>替换VA_X.dll文件</h1><p>安装完以后把Crack文件夹里面的VA_X.dll替换掉小番茄安装目录里面的VA_X.dll就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisualStudio插件 </tag>
            
            <tag> VisualAssist </tag>
            
            <tag> 小番茄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客在本地正常显示,部署到github上后排版混乱</title>
      <link href="/2021/07/31/hexo%E5%8D%9A%E5%AE%A2%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA-%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A%E5%90%8E%E6%8E%92%E7%89%88%E6%B7%B7%E4%B9%B1/"/>
      <url>/2021/07/31/hexo%E5%8D%9A%E5%AE%A2%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA-%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A%E5%90%8E%E6%8E%92%E7%89%88%E6%B7%B7%E4%B9%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需强制刷新浏览器缓存，<strong>Shift+F5</strong>刷新，才能显示修改后的新界面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新生成网站导致域名失效</title>
      <link href="/2021/07/31/%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E7%BD%91%E7%AB%99%E5%AF%BC%E8%87%B4%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/"/>
      <url>/2021/07/31/%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E7%BD%91%E7%AB%99%E5%AF%BC%E8%87%B4%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="新建CNAME文件"><a href="#新建CNAME文件" class="headerlink" title="新建CNAME文件"></a>新建CNAME文件</h1><p>在hexo跟目录下的source文件夹内新建一个CNAME文件（新建一个文本文件，去掉后缀名就可以保存为所有文件），在CNAME文件里面填写自己的域名就可以了。</p><p><img src="https://img-blog.csdnimg.cn/20210731101923729.png"><br><img src="https://img-blog.csdnimg.cn/20210731102010910.png"><br>然后hexo g -d重新生成部署（这里一定确定生成成功，可能因为网络原因导致失败）。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE5打包安卓环境搭建</title>
      <link href="/2021/07/30/UE5%E6%89%93%E5%8C%85%E5%AE%89%E5%8D%93%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/07/30/UE5%E6%89%93%E5%8C%85%E5%AE%89%E5%8D%93%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="下载UE5"><a href="#下载UE5" class="headerlink" title="下载UE5"></a>下载UE5</h1><p>首先自己下载UE5，然后记得把Android选项勾上下载，默认好像是勾上了的，如果没勾上自己下载一下。   </p><p><img src="https://img-blog.csdnimg.cn/20210730212849100.png"><br><img src="https://img-blog.csdnimg.cn/20210730212858482.png"></p><h1 id="下载jdk-8u77-windows-x64-exe"><a href="#下载jdk-8u77-windows-x64-exe" class="headerlink" title="下载jdk-8u77-windows-x64.exe"></a>下载jdk-8u77-windows-x64.exe</h1><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">官网下载地址</a></p><p><img src="https://img-blog.csdnimg.cn/20210730213151369.png"><br>当然官网下载速度可能有点慢，如果实在是下载不了的话，就从后面我提供的链接里面下载。<br>下载完以后直接安装，安装路径就保持默认，安装比较简单，直接一直下一步就可以了，这里就不废话了。安装完以后找到安装路径，默认为C:\Program Files\Java，如果你更改了路径，那你就找到你自己安装的路径就可以了。然后复制路径C:\Program Files\Java\jdk1.8.0_77，在电脑左下角搜索environment，选择编辑系统环境变量。如下图所示：   </p><p><img src="https://img-blog.csdnimg.cn/20210730213735212.png"><br>点击环境变量 </p><p><img src="https://img-blog.csdnimg.cn/20210730213842439.png"><br>在用户变量里面点击新建        </p><p><img src="https://img-blog.csdnimg.cn/20210730213902952.png"><br>然后如下图设置，设置完以后点击确定。      </p><p><img src="https://img-blog.csdnimg.cn/20210730213951521.png"><br>点击下方系统环境变量的新建         </p><p><img src="https://img-blog.csdnimg.cn/2021073021405544.png"><br>然后如下图设置，设置完以后点击确定。     </p><p><img src="https://img-blog.csdnimg.cn/20210730213951521.png"><br>这样环境变量就设置好了。</p><h1 id="下载AndroidStudio"><a href="#下载AndroidStudio" class="headerlink" title="下载AndroidStudio"></a>下载AndroidStudio</h1><p><a href="https://developer.android.com/studio/archive">官网下载地址</a></p><p><img src="https://img-blog.csdnimg.cn/2021073021441631.png"><br>当然官网下载速度可能有点慢，如果实在是下载不了的话，就从后面我提供的链接里面下载。<br>下载完以后直接安装，取消Android Virtual Device勾选，没必要下载，当然你也可以选择下载。  </p><p><img src="https://img-blog.csdnimg.cn/20210730214659346.jpg"><br>AndroidStudio安装位置自己选择，比如我安装在D:\AndroidStudio，安装完以后直接启动。<br>选择SDK Manager。         </p><p><img src="https://img-blog.csdnimg.cn/20210730220913881.png"><br>选择Android API 30（如果31勾选了的话取消了它）   </p><p><img src="https://img-blog.csdnimg.cn/20210730220947851.png"><br>然后点击SDK Tools，按如下图进行选择，如果31.0.0勾选了的话取消它，然后点击Apply。 </p><p><img src="https://img-blog.csdnimg.cn/20210730221522261.png"><br>安装位置的话我放在D:\sdk，你自己看着放，等待安装完。             </p><h1 id="UE5创建测试项目"><a href="#UE5创建测试项目" class="headerlink" title="UE5创建测试项目"></a>UE5创建测试项目</h1><p>打开UE5创建一个蓝图第三人称模板项目，如下图设置。   </p><p><img src="https://img-blog.csdnimg.cn/20210730222309410.png"><br>打开ProjectSettings       </p><p><img src="https://img-blog.csdnimg.cn/20210730222355712.png"><br>然后如下图设置     </p><p><img src="https://img-blog.csdnimg.cn/20210730222537679.png"><br>现在进入jdk安装目录复制C:\Program Files\Java\jdk1.8.0_77\bin 路径，然后打开cmd命令行窗口，记得以管理员身份运行。 </p><p><img src="https://img-blog.csdnimg.cn/2021073022285233.png"><br>通过cd 进入我们刚刚复制的路径     </p><p><img src="https://img-blog.csdnimg.cn/2021073022302776.png"><br>然后复制如下命令进去回车           </p><pre><code class="(C++)">    keytool -genkey -v -keystore ExampleKey.keystore -alias MyKey -keyalg RSA -keysize 2048 -validity 10000  </code></pre><p>口令这个得记住后面有用，比如我这里设置为<strong>666666</strong>.其他的东西随便写，还有记得回复写<strong>是</strong>不能是<strong>yes</strong>，然后回车就可以了。  </p><p><img src="https://img-blog.csdnimg.cn/20210730223211947.png"><br>这个时候在咱们的C:\Program Files\Java\jdk1.8.0_77\bin路径下生成了一个文件。  </p><p><img src="https://img-blog.csdnimg.cn/20210730223508117.png"><br>把这玩意复制到刚刚创建的UE5项目的Build/Android路径下。       </p><p><img src="https://img-blog.csdnimg.cn/2021073022432889.png"><br>进入UE5编辑器的ProjectSettings里面，选择Android。    </p><p><img src="https://img-blog.csdnimg.cn/20210730224537107.png"><br><img src="https://img-blog.csdnimg.cn/20210730224828429.png"><br>到这里就全部设置完了，直接去导出就可以了。      </p><p><img src="https://img-blog.csdnimg.cn/20210730224907127.png"><br>等待打包完，OK环境搭建结束了。</p><h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><ol><li>Android Studio报错unable to access android sdk add-on<br><img src="https://img-blog.csdnimg.cn/2021073023401258.png"><blockquote><p>解决办法：        </p><ul><li>在Android Studio的安装目录下，找到\bin\idea.properties   </li><li>在尾行添加disable.android.first.run=true，表示初次启动不检测SDK</li></ul></blockquote></li><li>UE5打包失败    </li></ol><p><img src="https://img-blog.csdnimg.cn/2021073022520373.png">   </p><blockquote><p>解决办法：<br>安装dotnet-sdk-3.1.409-win-x64就可以了，<a href="https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.409-windows-x64-installer">下载地址</a>。<br>下载安装完以后重新打包就可以了。  </p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol><li><a href="https://pan.baidu.com/s/1XvOiuAs0W0OdkX06s3AlNg">jdk-8u77-windows-x64</a> 提取码: grgu   </li><li><a href="https://pan.baidu.com/s/1cyyZUGysB5MwfR1LLnfXkw">android-studio-ide-191.6010548-windows</a> 提取码: q7aq    </li><li><a href="https://pan.baidu.com/s/1Vto2VcM9AI7TSyaZcSPiyA">dotnet-sdk-3.1.409-win-x64</a>  提取码: bb5z   </li></ol>]]></content>
      
      
      <categories>
          
          <category> UE5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UE5 </tag>
            
            <tag> 打包 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Github上备份Hexo博客</title>
      <link href="/2021/07/27/%E5%9C%A8Github%E4%B8%8A%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/27/%E5%9C%A8Github%E4%B8%8A%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>我们的博客是托管到 GitHub 上的. 而我们每次上传（hexo d）的是网页文件, 不是我们<br>的文章, 所以我们如果想上传文章, 但同时不会干扰到网页部署, 就在 GitHub 的博客仓<br>库上建立一个分支 hexo, 这个 hexo 分支的作用就是用来保存我的 MarkDown 文章, 站点<br>配置和一些其他文件.</p><p>这样hexo d推送的是 master 分支, 而git push推送的是 hexo 分支, 互不干扰.</p><h1 id="建立一个中转站"><a href="#建立一个中转站" class="headerlink" title="建立一个中转站"></a>建立一个中转站</h1><p>建立一个文件夹, 名字随便, 我这里叫 hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yang-shuohao/yang-shuohao.github.io.git</span><br></pre></td></tr></table></figure><p>其实这里仅仅只是为了获得版本管理的.git隐藏文件夹.</p><h1 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h1><p>建立一个分支, 我这里分支名为 hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><h1 id="清空-hexo-分支"><a href="#清空-hexo-分支" class="headerlink" title="清空 hexo 分支"></a>清空 hexo 分支</h1><p>克隆下来的都是一些编译后的静态网页, 我们不需要. 删除除了.git文件夹的所有文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m  &quot;清空hexo分支仓库&quot;</span><br><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure><p>这里同时设置了以后默认为hexo分支, 回到博客的根目录下就能看到.</p><p>我们的博客的站点配置文件_config.yml的默认提交分支为 master.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yang-shuohao/yang-shuohao.github.io.git</span><br><span class="line">  branch: master #提交的默认分支</span><br></pre></td></tr></table></figure><h1 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h1><p>把.git文件夹移动到博客的根目录下.</p><h1 id="提交源文件"><a href="#提交源文件" class="headerlink" title="提交源文件"></a>提交源文件</h1><p>到了这一步有个注意点, 如果你的主题文件是克隆 Github 下来的, 那么会带有该主题的<br>版本管理文件, 也就是.git文件夹. 所以主题下面的要删除.git文件夹和<br>.gitignore文件, 否则会忽略这个 butterfly 主题的上传.</p><p>.deploy_git是部署静态文章用的, 需要保留.</p><p>之后每次更新博客之后, push 源文件到hexo分支即可备份</p><h1 id="个人备份习惯"><a href="#个人备份习惯" class="headerlink" title="个人备份习惯"></a>个人备份习惯</h1><p>个人而言习惯于先备份文件再生成博客。即先执行git add .，git commit -m “Backup”，git push origin hexo将博客备份完成，然后执行hexo g -d发布博客。</p><h1 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h1><p>目前假设本地Hexo博客基础环境已经搭好（其实很简单，只需要安装git和Nodejs（我下载的版本为LTS node-v14.17.3-x64.msi)，然后通过<code>npm install -g hexo-cli</code>安装hexo就可以了）。</p><h2 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h2><p>输入下列命令克隆博客必须文件(hexo分支)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yourgithubname/yourgithubname.github.io</span><br></pre></td></tr></table></figure><h2 id="恢复博客-1"><a href="#恢复博客-1" class="headerlink" title="恢复博客"></a>恢复博客</h2><p>在克隆的那个文件夹下输入如下命令恢复博客：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</p><h1 id="迁移后可能遇到的问题"><a href="#迁移后可能遇到的问题" class="headerlink" title="迁移后可能遇到的问题"></a>迁移后可能遇到的问题</h1><h2 id="node版本过高"><a href="#node版本过高" class="headerlink" title="node版本过高"></a>node版本过高</h2><p>重新安装低版本 node</p><h2 id="deploy-git异常"><a href="#deploy-git异常" class="headerlink" title=".deploy_git异常"></a>.deploy_git异常</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/25/hello-world/"/>
      <url>/2021/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
